package chessgame.piece;

import java.util.HashSet;
import java.util.Set;
import core.Coordinate;
import chessgame.Board;
import chessgame.enums.Side;

public class Pawn implements Piece {

	Side side;

	public Pawn(Side side) {
		this.side = side;
	}

	@Override
	public Boolean isYourSide(Side side) {
		return this.side == side;
	}

	@Override
	public Set<Coordinate> searchMovibleGrids(Coordinate pieceToMove,
			Board presentBoard) {
		if (side == Side.WHITE) {
			return searchMovibleGridsWhenWhite(pieceToMove, presentBoard);
		}
		return searchMovibleGridsWhenBlack(pieceToMove, presentBoard);
	}

	private Set<Coordinate> searchMovibleGridsWhenWhite(Coordinate pieceToMove,
			Board presentBoard) {
		Set<Coordinate> movibleNodes = new HashSet<>();
		int row = pieceToMove.getRow();
		int col = pieceToMove.getCol();

		if (!presentBoard.isPlaced(new Coordinate(row + 1, col))) {
			movibleNodes.add(new Coordinate(row + 1, col));
		}
		if (presentBoard.isAttackable(new Coordinate(row + 1, col + 1),
				this.side)) {
			movibleNodes.add(new Coordinate(row + 1, col + 1));
		}
		if (presentBoard.isAttackable(new Coordinate(row + 1, col - 1),
				this.side)) {
			movibleNodes.add(new Coordinate(row + 1, col - 1));
		}
		return movibleNodes;
	}

	private Set<Coordinate> searchMovibleGridsWhenBlack(Coordinate pieceToMove,
			Board presentBoard) {
		Set<Coordinate> movibleNodes = new HashSet<>();
		int row = pieceToMove.getRow();
		int col = pieceToMove.getCol();

		if (!presentBoard.isPlaced(new Coordinate(row - 1, col))) {
			movibleNodes.add(new Coordinate(row - 1, col));
		}
		if (presentBoard.isAttackable(new Coordinate(row - 1, col + 1),
				this.side)) {
			movibleNodes.add(new Coordinate(row - 1, col + 1));
		}
		if (presentBoard.isAttackable(new Coordinate(row + 1, col - 1),
				this.side)) {
			movibleNodes.add(new Coordinate(row - 1, col - 1));
		}
		return movibleNodes;
	}
}

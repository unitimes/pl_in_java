package chessgame.piece;

import java.io.PrintStream;
import java.util.HashSet;
import java.util.Set;

import core.Coordinate;
import chessgame.CoordinateSelector;
import chessgame.StatusChecker;
import chessgame.enums.Side;

public class Pawn implements Piece {

	private CompositeCommon compositePieceCommon;
	private int moveCount;

	public Pawn(Side side) {
		this.compositePieceCommon = new CompositeCommon(side);
		this.moveCount = 0;
	}

	@Override
	public Boolean isYourSide(Side side) {
		return compositePieceCommon.isYourSide(side);
	}

	@Override
	public Set<Coordinate> searchMovibleGrids(Coordinate pieceToMove,
			StatusChecker statusChecker) {
		if (isYourSide(Side.WHITE)) {
			return searchMovibleGridsWhenWhite(pieceToMove, statusChecker);
		}
		return searchMovibleGridsWhenBlack(pieceToMove, statusChecker);
	}

	public Set<Coordinate> searchMovibleGrids2(Coordinate pieceToMove,
			StatusChecker statusChecker) {
		Set<Coordinate> movibleNodes = new HashSet<>();
		int row = pieceToMove.getRow();
		int col = pieceToMove.getCol();
		Side side = compositePieceCommon.getSide();
		Coordinate coordinate;

		coordinate = checkCoordinateException(
				row + 1 * CoordinateSelector.productRowIncrementOfPawn(side),
				col);
		if (!statusChecker.isPlaced(coordinate)) {
			movibleNodes.add(coordinate);
		}
		if (isFirstMove()
				&& !statusChecker.isPlaced(coordinate)
				&& !statusChecker
						.isPlaced(coordinate = checkCoordinateException(
								row
										+ 2
										* CoordinateSelector
												.productRowIncrementOfPawn(side),
								col))) {
			movibleNodes.add(coordinate);
		}
		addAttackableGrids(
				movibleNodes,
				statusChecker,
				checkCoordinateException(
						row
								+ 1
								* CoordinateSelector
										.productRowIncrementOfPawn(side),
						col + 1));
		addAttackableGrids(
				movibleNodes,
				statusChecker,
				checkCoordinateException(
						row
								+ 1
								* CoordinateSelector
										.productRowIncrementOfPawn(side),
						col - 1));
		return movibleNodes;
	}

	private Set<Coordinate> searchMovibleGridsWhenWhite(Coordinate pieceToMove,
			StatusChecker statusChecker) {
		Set<Coordinate> movibleNodes = new HashSet<>();
		int row = pieceToMove.getRow();
		int col = pieceToMove.getCol();

		if (!statusChecker.isPlaced(new Coordinate(row + 1, col))) {
			movibleNodes.add(new Coordinate(row + 1, col));
		}
		if (isFirstMove()
				&& !statusChecker.isPlaced(new Coordinate(row + 1, col))
				&& !statusChecker.isPlaced(new Coordinate(row + 2, col))) {
			movibleNodes.add(new Coordinate(row + 2, col));
		}
		addAttackableGrids(movibleNodes, statusChecker, new Coordinate(row + 1,
				col + 1));
		addAttackableGrids(movibleNodes, statusChecker, new Coordinate(row + 1,
				col - 1));
		return movibleNodes;
	}

	private Set<Coordinate> searchMovibleGridsWhenBlack(Coordinate pieceToMove,
			StatusChecker statusChecker) {
		Set<Coordinate> movibleNodes = new HashSet<>();
		int row = pieceToMove.getRow();
		int col = pieceToMove.getCol();

		if (!statusChecker.isPlaced(new Coordinate(row - 1, col))) {
			movibleNodes.add(new Coordinate(row - 1, col));
		}
		if (isFirstMove()
				&& !statusChecker.isPlaced(new Coordinate(row - 1, col))
				&& !statusChecker.isPlaced(new Coordinate(row - 2, col))) {
			movibleNodes.add(new Coordinate(row - 2, col));
		}
		addAttackableGrids(movibleNodes, statusChecker, new Coordinate(row - 1,
				col + 1));
		addAttackableGrids(movibleNodes, statusChecker, new Coordinate(row - 1,
				col - 1));
		return movibleNodes;
	}

	private void addAttackableGrids(Set<Coordinate> movibleNodes,
			StatusChecker statusChecker, Coordinate grid) {
		if (statusChecker.isAttackable(grid, compositePieceCommon.getSide())) {
			movibleNodes.add(grid);
		}
	}

	private Coordinate checkCoordinateException(int row, int col) {
		try {
			return new Coordinate(row, col);
		} catch (IllegalArgumentException e) {
			System.err.format("IllegalArgumentException: %s%n", e.getMessage());
			return null;
		}
	}

	@Override
	public String toString() {
		if (compositePieceCommon.isYourSide(Side.BLACK)) {
			return "\u265F";
		}
		return "\u2659";
	}

	public Boolean isFirstMove() {
		return moveCount == 0;
	}

	public Boolean isSecondMove() {
		return moveCount == 1;
	}

	public void increaseMoveCount() {
		moveCount++;
	}
}

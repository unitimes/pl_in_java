package chessgame;

import java.util.Map;
import java.util.Set;

import chessgame.piece.Piece;
import core.Coordinate;

class MoveController {
	private Map<Coordinate, Piece> board;
	private Set<Coordinate> movibleGrids;
	private Coordinate lastChoosedPiece;

	MoveController(Map<Coordinate, Piece> board) {
		this.board = board;
	}

	Set<Coordinate> searchMovibleGrids(Coordinate piece) {

		return board.get(piece).searchMovibleGrids(piece,
				new StatusChecker(board));
	}

	void moveChoosedPieceTo(Coordinate target) {
		// Attack code
		if (!movibleGrids.contains(target)) {
			throw new IllegalArgumentException("It's not a movible coordinate.");
		}
		if (board.containsKey(target)) {
			board.remove(target);
		}

		board.put(target, board.get(lastChoosedPiece));
		board.remove(lastChoosedPiece);
		new BoardPrinter(board).printBoard();
	}

	void moveDirectTo(Coordinate choosedPiece, Coordinate target) {
		makeMovibleGridsSet(choosedPiece);
		moveChoosedPieceTo(target);
	}

	void makeMovibleGridsSet(Coordinate piece) {
		if (!board.containsKey(piece)) {
			throw new IllegalArgumentException("There aren't any pieces.");
		}
		lastChoosedPiece = piece;
		movibleGrids = searchMovibleGrids(piece);
	}
	
	void printMovibleGridsSet(Coordinate piece) {
		makeMovibleGridsSet(piece);
		new BoardPrinter(board, movibleGrids).printBoard();		
	}
}

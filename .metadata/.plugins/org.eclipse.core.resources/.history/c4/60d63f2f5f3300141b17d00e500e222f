package chessgame;

import static org.junit.Assert.*;

import java.util.Set;

import org.junit.Test;

import core.Coordinate;
import chessgame.enums.Side;

public class BoardTest {

	@Test
	public void testMove() throws Exception {
		Board board = new Board();
		board.printGrids();
		board.moveTo(new Coordinate(3, 3), new Coordinate(4, 4));
		board.printGrids();
		
		Set<Coordinate> movibleSet = board.searchMovibleGrids(new Coordinate(4, 4));
		System.out.println(movibleSet.toString());
	}
	@Test
	public void testSearchMovibleNodesWhenAnotherSidePlacedWithWhite() {
		Board board = new Board();
		board.setPawn(3, 3, Side.WHITE);
		board.setPawn(4, 4, Side.BLACK);
		board.setPawn(4, 2, Side.BLACK);
		board.searchMovibleGrids(3, 3);
	}
	
	@Test
	public void testSearchMovibleNodesWhenSameSidePlacedWithWhite() {
		Board board = new Board();
		board.setPawn(3, 3, Side.WHITE);
		board.setPawn(4, 4, Side.WHITE);
		board.setPawn(4, 2, Side.WHITE);
		board.searchMovibleGrids(3, 3);
	}
	
	@Test
	public void testSearchMovibleNodesWhenNotPlacedWithWhite() {
		Board board = new Board();
		board.setPawn(3, 3, Side.WHITE);
		board.searchMovibleGrids(3, 3);
	}
	@Test
	public void testSearchMovibleNodesWhenAnotherSidePlacedWithBlack() {
		Board board = new Board();
		board.setPawn(3, 3, Side.BLACK);
		board.setPawn(2, 4, Side.WHITE);
		board.setPawn(2, 2, Side.WHITE);
		board.searchMovibleGrids(3, 3);
	}
	
	@Test
	public void testSearchMovibleNodesWhenSameSidePlacedWithBlack() {
		Board board = new Board();
		board.setPawn(3, 3, Side.BLACK);
		board.setPawn(2, 4, Side.BLACK);
		board.setPawn(2, 2, Side.BLACK);
		board.searchMovibleGrids(3, 3);
	}
	
	@Test
	public void testSearchMovibleNodesWhenNotPlacedWithBlack() {
		Board board = new Board();
		board.setPawn(3, 3, Side.BLACK);
		board.searchMovibleGrids(3, 3);
	}
}

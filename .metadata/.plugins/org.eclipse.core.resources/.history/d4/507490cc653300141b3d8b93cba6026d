package chessgame;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import chessgame.enums.Side;
import chessgame.piece.Pawn;
import chessgame.piece.Piece;
import core.Coordinate;

public class Board {
	Map<Coordinate, Piece> grids2;
	
	public Board () {
		grids2 = new HashMap<Coordinate, Piece>();
		setGrids();
	}
	
	//Status Check
	public Boolean isPlaced(Coordinate grid) {
		return grids2.containsKey(grid);
	}
	public Boolean isMySide(Coordinate grid, Side side) {
		return grids2.get(grid).isYourSide(side);
	}
	public Boolean isAttackable(Coordinate grid, Side side) {
		return isPlaced(grid) && !isMySide(grid, side);
	}
	
	//Set
	private void setGrids() {
		grids2.put(new Coordinate(3, 3), new Pawn(Side.BLACK));
		grids2.put(new Coordinate(3, 5), new Pawn(Side.WHITE));
	}
	
	//Move
	
	public Set<Coordinate> searchMovibleGrids(Coordinate piece) {
		return grids2.get(piece).searchMovibleGrids(piece, this);
	}
	
	public void moveTo(Coordinate from, Coordinate to) {
		//Attack code
		if(grids2.containsKey(to)) {
			grids2.remove(to);
		}
		
		grids2.put(to, grids2.get(from));
		grids2.remove(from);
	}
	
	
	//for test
	public Boolean contain(Coordinate key) {
		return grids2.containsKey(key);
	}
	
	//Print
	public void printGrids() {
		System.out.println(grids2.toString());
	}
}

package chessgame;

import java.util.Map;
import java.util.Set;

import chessgame.enums.Castling;
import chessgame.piece.King;
import chessgame.piece.Piece;
import core.Coordinate;

class MoveController {
	private Map<Coordinate, Piece> board;
	private Set<Coordinate> movibleGrids;
	private Coordinate lastChoosedPiece;
	private RecordBoard recordBoard;
	private StatusChecker statusChecker;
	private BoardPrinter boardPrinter;
	private CastlingController castlingController;

	MoveController(Map<Coordinate, Piece> board, RecordBoard recordBoard, BoardPrinter boardPrinter) {
		this.board = board;
		this.recordBoard = recordBoard;
		this.boardPrinter = boardPrinter;
		this.statusChecker = new StatusChecker(board, recordBoard);
		this.castlingController = new CastlingController(board, statusChecker, recordBoard);
	}

	void moveChoosedPieceTo(Coordinate target) {
		if (lastChoosedPiece == null) {
			throw new IllegalArgumentException(
					"You've not yet choosen any pieces.");
		}
		if (movibleGrids == null || !movibleGrids.contains(target)) {
			throw new IllegalArgumentException("It's not a movible coordinate.");
		}

		if (recordBoard.canCastlingLong()) {
			isCastlingTarget(target, Castling.LONG);
			doAfterMoveWorks();
			return;
		}
		
		if (recordBoard.canCastlingShort()) {
			isCastlingTarget(target, Castling.SHORT);
			doAfterMoveWorks();
			return;
		}
		
		// Attack code
		if (board.containsKey(target)) {
			attackTo(target);
		}

		board.put(target, board.get(lastChoosedPiece));
		board.remove(lastChoosedPiece);
		
		doAfterMoveWorks();
	}
	
	private void doAfterMoveWorks() {
		// Reset
		lastChoosedPiece = null;
		movibleGrids = null;
		
		recordBoard.changeSide();	
	}

	void moveDirectTo(Coordinate pieceToMove, Coordinate target) {
		makeMovibleGridsSet(pieceToMove);
		moveChoosedPieceTo(target);
	}

	private void attackTo(Coordinate target) {
		recordBoard.recordDeadPiece(board.get(target));
		board.remove(target);
	}

	void printMovibleGridsSet(Coordinate piece) {
		makeMovibleGridsSet(piece);
		boardPrinter.printBoard(movibleGrids);
	}

	private void makeMovibleGridsSet(Coordinate piece) {
		if (!board.containsKey(piece)) {
			throw new IllegalArgumentException("There aren't any pieces.");
		}
		Piece choosedPiece = board.get(piece);
		if (!choosedPiece.isYourSide(recordBoard.getSide())) {
			throw new IllegalArgumentException("It's not your piece.");
		}
		recordBoard.resetCastlingPossibilitySet();
		lastChoosedPiece = piece;
		movibleGrids = searchMovibleGrids(piece);
		if (choosedPiece instanceof King) {
			checkCastling();
			addCastlingGrids();
		}
	}
	
	private Set<Coordinate> searchMovibleGrids(Coordinate piece) {
		return board.get(piece).searchMovibleGrids(piece,
				this.statusChecker);
	}
	
	private void checkCastling() {
		King king = (King)board.get(lastChoosedPiece);
		if(king.isFirstMove()) {
			castlingController.checkCastling();
		}
	}
	
	private void addCastlingGrids() {
		int row = CoordinateSelector.productFirstRank(recordBoard);
		if (recordBoard.canCastlingLong()) {
			movibleGrids.add(new Coordinate(row, 2));
		}
		if (recordBoard.canCastlingShort()) {
			movibleGrids.add(new Coordinate(row, 6));
		}
	}

	//ch
	private Boolean isCastlingTarget(Coordinate target, Castling type) {
		int col = 2;
		if (type == Castling.SHORT) {
			col = 6;
		}
		if (target.equals(new Coordinate(CoordinateSelector.productFirstRank(recordBoard), col))) {
			return true;
		}
		return false;
	}
	
	void castling(Castling type) {
		int row = CoordinateSelector.productFirstRank(recordBoard);
		if (type == Castling.LONG) {
			castlingLong(row);
			return;
		}
		castlingShort(row);
	}

	private void castlingShort(int row) {
		board.put(new Coordinate(row, 6), board.get(new Coordinate(row, 4)));
		board.remove(new Coordinate(row, 4));
		board.put(new Coordinate(row, 5), board.get(new Coordinate(row, 7)));
		board.remove(new Coordinate(row, 7));
	}
	
	private void castlingLong(int row) {
		board.put(new Coordinate(row, 2), board.get(new Coordinate(row, 4)));
		board.remove(new Coordinate(row, 4));
		board.put(new Coordinate(row, 3), board.get(new Coordinate(row, 0)));
		board.remove(new Coordinate(row, 0));
	}
}

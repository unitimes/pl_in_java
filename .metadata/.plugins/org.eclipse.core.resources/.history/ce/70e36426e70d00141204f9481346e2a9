import java.util.ArrayList;
import java.util.Random;

public class Ladder {
	public Node[][] lad;
	private int cols, rows;
	private final int wRows = 12;
	public Ladder(int cols, int rows) {
		this.cols = cols;
		this.rows = rows;
		lad = new Node[cols][12];
		makeLadder();
	}
	private void makeLadder() {
		int rowsPerCols = rows/cols;
		int rests = rows%cols;
		for(int i = 0; i < cols - 1; i++) {
			makeConnet(i, rowsPerCols, rests--);
		}
	}
	private void makeConnet(int numOfCol, int rowPerCols, int rests) {
		if(rests > 0) {
			return;
		}
	}
	public void linkNodes(Node l, Node r) {
		l.setR_node(r);
		r.setL_node(l);
	}
	public void linkCols(int numOfCol, int numOfRows) {
		ArrayList<Integer> rowList = new ArrayList<Integer>();
		for (int i = 1; i < wRows - 1; i++) {
			rowList.add(i);
		}
		Random rdm = new Random();
		//link nodes randomly without duplication
		for (int i = 0; i < numOfRows; i++) {
			int row = rdm.nextInt(rowList.size());
			linkNodes(lad[numOfCol][rowList.get(row)], lad[numOfCol + 1][rowList.get(row)]);
			rowList.remove(row);
		}
	}
}
